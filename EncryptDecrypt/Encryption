
//
//  Encryption.c
//  AES College
//
//  Created by Joy Janney family on 4/20/23.
//

#include "General Purpose.h"
#include "Look Up Charts.h"
#include "Password.h"
/*
 Parameters:
     plaintext: Pointer to the file that the user wishes to be encrypted
     cyphertext: Pointer to the file that the encrypted data will be written to
 Return:
     void
 Description: This subroutine encrypts data in a file by calling of the following subroutines:
    CreatePasscode - creates a passcode
    KeyExpansion - expands key
    Addition - Uses exclusive oring to add to numbers together
    Substitute - Uses substitute encryption
    MixColumns - Uses a finite field to complete matrix mulitpliation

 Encryption:
 The basic system is:
     1)Add passcode - This is a type of adding using exculsive oring inorder to change the numbers
     2) 10 repeitions
         A.Substitution - Go throughthe matrix and substitute the letters
         B.Shift the rows - Shift the rows to scramble them
         C.Mix Columns - This is a form of matrix multipliation
         D.Add the Passcode - This is again exclusive oring
     3)Substitute
     4)Shift Rows
     5)Key Addition - This is the final exculusive oring with the passocde
 
 The passcode change everytime. Each time the next version is used
 */

void Encrypt(FILE *plaintext, FILE *cyphertext){

    const int roundnum = 10;
    int letter = 'a';
    int End = 0;
    int count;
    int round;
    
    CreatePasscode();//Get the orignial passcode
    KeyExpansion();
    letter=fgetc(plaintext);
    while (End==0) {
        for(count = 0; count <16; count++){//This loops takes sixteen letters and brings them to words to begin the encryption
            
            if(letter != EOF){//If the end of file is not reached then that letter can be put into words
                Words[count/16][count%16] = letter;
                letter = fgetc(plaintext);
            }
            else{//Else the EOF should not be encrypted and a space put inbetween
                Words[count/16][count%16] = 32;
                End = 1;//When End does not equal 0 the overall loop will end
            }
        }
        Addition(&Words[0][0], &Passcodes[0][0][0]);//Step 1
        for(round=0;round<roundnum;round++){//Step 2
            Substitute(SubChartNew, Words);//Step 2A
            for(count=1;count<4;count++){
                Shift(&Words[count-1][0], count);
            }//Step 2B
            MixColumns(&Words[0][0], &Mult[0][0]);//Step 2C
            Addition(&Words[0][0], &Passcodes[round+1][0][0]);;//Step 2D
        }
        
        Substitute(SubChartNew, Words);//Step 3
        for(count=1;count<4;count++){
            Shift(&Words[count-1][0], count);
        }//Step 4
        Addition(&Words[0][0], &Passcodes[11][0][0]);;//Step 5
        for(row=0;row<4;row++){//Printing the encrypted file to cyphertext
            for(column=0;column<4;column++){
                fprintf(cyphertext, "%c", Words[row][column]);
            }
        }
    }
}

