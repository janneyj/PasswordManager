//
//  Password.c
//  AES College
//
//  Created by Janney family on 4/20/23.
//  

#include <stdio.h>
#include "Look Up Charts.h"
#include "General Purpose.h"
#include "Encryption.h"

int SpecialChr(char chr);

/*
 Parameter:
    a buffer to place the password in
 Return:
    void
 Description:
    This function will get a password that meets the following requirements:
     -Length between 8-32 with at least
     -1 Number
     -1 Special character
     -1 Lowercase
     -1 Uppercase
    If these conditions are not met, the user will be prompted to input a new passcode
 */
void GetPassword(char buffer[33]){
    
    int Num=0;
    int SpecialChar=0;
    int LowerCase=0;
    int UpperCase=0;
    int count;
    int chr='a';
    int end=1;
    printf("Passwords must be:\n     8-32 characters\n     must include one upper case letter\n     one lower case letter\n     one number\n     one special character\n\n");//Explains the rules of what you must input fot a password

    do{
        fflush(stdin);
        
        printf("Please input a password: ");
        for(count = 0; count < 32&&chr!='\n'; count++ ) {//This gets the characters

            
            chr = getchar();
            buffer[count] = chr;
            if( chr == '\n'){//If a new line is used, the password has run out and the loop must end
                    buffer[count]='\0';
                    count++;
            }
            else if(SpecialChr(buffer[count])==1)
                SpecialChar++;
            
            else if(buffer[count]>=48&&buffer[count]<=57)//Numbers
                Num++;

            else if(buffer[count]>=65&&buffer[count]<=90)//Uppercase
                UpperCase++;

            else if(buffer[count]>=97&&buffer[count]<=122)//Lowercase
                LowerCase++;

            else{
                printf("Invalid character. %d\n", buffer[count]);
                end=0;
            }
        }
        if(SpecialChar<1|| Num<1|| LowerCase<1|| UpperCase<1|| count<8|| count>32|| buffer[32]!='\0'||end==0){
            printf("Incorrect Password\n Passwords must be:\n     8-32 characters\n     must include one upper case letter\n     one lower case letter\n     one number\n     one special character\n\n");
            end=1;//Reset all the variables to start over again with the user inputting a new password
            SpecialChar=0;
            Num=0;
            LowerCase=0;
            UpperCase=0;
            count=0;
            chr='\0';
        }
        else
            end=0;
        
    }while(end!=0);
}

/*
 Parameter:
    A character to check if it's a special character
 Return:
    1 if the character is a special character (!@#$%^&, etc.)
    0 if it is a not
 Description:  This function will return a 1 if a special character is reached and a 0 if a special character was not reached

 */
int SpecialChr(char chr){
    if((chr>=33&&chr<=47)||(chr>=58&&chr<=64)||(chr>=91&&chr<=96)||(chr>=123&&chr<=126))//This checks all four regions of special characters
        return 1;
    else
        return 0;
}

/*
 Parameter:
    PasscodeOld: The passcode that will stay the same
    PasscodeNew: The passcode that will be the rotated version of PasscodeOld
 Return:
    void
 Description:
    This subroutine Rotates the Passcode. This is different from the rotate columns used for encryption. Each columm is rotated by the number+1 assigned by the chart
 */
void RotatePasscode(int PasscodeOld[4][4], int PasscodeNew[4][4]){
    int num;

    for(column=0;column<4;column++){
        for(row=0;row<4;row++){
            num=column+row+1;
            if(num>=4)
                num=num-4;//If the number is over four, it can not fit on the chart, thus it must go up not down
            PasscodeNew[num][column]=PasscodeOld[row][column];
        }
    }
}

/*
 Parameters:
    void
 Return:
    void
 Description:
    Key Expansion is the process by which the original inputted passcode will be turned into 11 more addition passcodes. It has three main parts:
    -Rotate the columns
    -Substitute
    -Multiply
    The substitution and multiply can be done using the subroutines substitute and mixcolumns. On the other hand, since the columns are shifted and not the rows, shift can not be used.
 */
void KeyExpansion(void){
    int num;
    for(num=0; num<12; num++){
        RotatePasscode(Passcodes[num], Passcodes[num+1]);
        Substitute(SubChartNew, Passcodes[num+1]);
        MixColumns(&Passcodes[num+1][0][0], &KE_Mult_Nums[0][0]);
    }
}

/*
 Parameter:
    x: amount of bits copied
    *y: new location of bits (the integer to copy the new bits to)
    p: where to begin copying (the bit number)
    n: location of bits (integer to copy the bits from)
    q: where to place bits (the bit number for *y)
 Return:
    *y: This return the new number with the addition bits
 Description:
    This subroutine is used as a part of generating the passcode. The bits are copied inorder to further scramble the password. This can help mix the bits from the passowrd together.
 */
int SetBits(int x, int *y, int p, int n, int q){
    
    if((x+p)>8){
        printf("Variable x + variable p must equal less than 8\n");
        return 1;
    }
    
    int Mask=1;//This sets up a variable that can be used to isolate bits
    
    int z=0;//This is just a temporary variable that things will be copied to
    
    Mask=Mask<<(p);//This moves the mask to the variable that is the beginning of copying the bits
    
    while(x>0){//This loop copies the next x bits
        
        z=n&Mask;//This gets the one bit isolated
        *y=*y^z;//This moves the bit into the new variable
        Mask=Mask<<1;//This adjusts the mask so that it can be used again
        x--;
    }
    
    *y = *y>>p;//This moves the bits to the desired location
    *y = *y<<q;
    
    return *y;
}

/*
 Parameter:
    void
 Return:
    void
 Description:
    This subroutine creates the addition first passcode from the password. Since the passwords must be a minimium of eight characters, the password can easily be split into a 16 digit passcode by splitting them in half. Then, depending on how many additional characters were inputted, the other part of the passcode bits would be added in. If there were more than 16 characters, the bits would be exclusive ored to further scramble the passcode.
 */
void CreatePasscode(void){
    
    int temp;
    int count;
    int place;
    int bitcounter;
    
    char buffer[33];
    for(bitcounter = 0; bitcounter < 33; bitcounter++) {
        buffer[bitcounter] = '\0';
    }
    
    GetPassword(buffer);//This gets the buffer for the Passcodes
    
    for(count=0;count<8;count++){//This loop splits the first 8 chactaracters into a Passcode
        place=count*2;//The starting location moves over by two columns every time
        for(bitcounter=0;bitcounter<4;bitcounter++){//This cuts the bits into four spots to copy into the Passcodes
            row=place/4;
            column=place%4;
            temp=0;
            temp=SetBits(2, &temp, bitcounter*2, buffer[count],bitcounter*2);//This gets the package and copies it into a temporary variable
            Passcodes[0][row][column]=(Passcodes[0][row][column]^temp); //Then that variable can be copied using exclusive OXR since Passcodes is set to zero
            place++;//Move the starting location so that old progress doesn't get wiped out
            if(place>=16)//If place is over 16, memory will be written over, so pull it back around to the beginning
                place=place-16;
            if(buffer[count]=='\0')//If the Passcodes has run out no point in running the code anymore
                count=32;
        }
    }
    
    
    place=11;//This kepps track of where the bits should be moved
    //Since it is not proportional to the count, it must be done separately
    
    for(count=8;count<16;count++){
        
        row=place/4;//This gets the row
        column=place%4;//Get the column
        
        for(bitcounter=3;bitcounter>=0;bitcounter--){//This gets 2 bits at a time and copies them to another intiger
            
            temp=0;
            temp=SetBits(2, &temp, bitcounter*2, buffer[count],(3-bitcounter)*2);//This copies the bit to the opposite side of intiger
            
            
            Passcodes[0][row][column]=Passcodes[0][row][column]^temp;//The bits are then copied into Passcodes
            
            column++;//The column moves down by one in a stepwise pattern to cover the whold Passcodes
            
            if(column>3){//If the Passcodes if larger than 3 it must be brought down and the row brought up
                column=0;//column=0
                row++;
            }
            if(row>3)//If the row is greater than 3 it must be brought down to zero
                row=0;//row=0
            
        }
        if(buffer[count]=='\0')//If the password has run out there is no point running the code anymore
            count=32;//32?
        place=place-2;//Finally the starting spot for row and column will be moved up by 2
        if(place<0)//If the place is under 0 it is outside of the Passcodes and so must be brought back in to the range
            place=place+16;
    }
    
    
    for(count=16;count<32&& buffer[count] != '\0' ;count++){
        row=(count-16)/4;
        column=(count-16)%4;
        Passcodes[0][row][column]=Passcodes[0][row][column]^buffer[count];
    }
}
